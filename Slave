// SLAVE - robot

#include <SoftwareSerial.h>   //Software Serial Port
#include <Servo.h>

#define RxD 7
#define TxD 6
#define ConnStatus A1

#define DEBUG_ENABLED  1

// ##################################################################################
// ### EDIT THE LINES BELOW TO MATCH YOUR SHIELD NUMBER AND CONNECTION PIN OPTION ###
// ##################################################################################

int shieldPairNumber = 4;

// CAUTION: If ConnStatusSupported = true you MUST NOT use pin A1 otherwise "random" reboots will occur
// CAUTION: If ConnStatusSupported = true you MUST set the PIO[1] switch to A1 (not NC)

boolean ConnStatusSupported = true;   // Set to "true" when digital connection status is available on Arduino pin

// #######################################################

// The following two string variable are used to simplify adaptation of code to different shield pairs

String slaveNameCmd = "\r\n+STNA=Slave";   // This is concatenated with shieldPairNumber later

SoftwareSerial blueToothSerial(RxD,TxD);

Servo servoLeft;
Servo servoRight;

boolean autoPilot = false;

int leftReading;
int rightReading;

void setup()
{
    Serial.begin(9600);
    blueToothSerial.begin(38400);                    // Set Bluetooth module to default baud rate 38400
    
    pinMode(10, INPUT);  pinMode(9, OUTPUT);   // Left IR LED & Receiver
    pinMode(3, INPUT);  pinMode(2, OUTPUT);    // Right IR LED & Receiver
    
    servoLeft.attach(13);
    servoRight.attach(12);
    
    pinMode(RxD, INPUT);
    pinMode(TxD, OUTPUT);
    pinMode(ConnStatus, INPUT);

    //  Check whether Master and Slave are already connected by polling the ConnStatus pin (A1 on SeeedStudio v1 shield)
    //  This prevents running the full connection setup routine if not necessary.

    if(ConnStatusSupported) Serial.println("Checking Slave-Master connection status.");

    if(ConnStatusSupported && digitalRead(ConnStatus)==1)
    {
        Serial.println("Already connected to Master - remove USB cable if reboot of Master Bluetooth required.");
    }
    else
    {
        Serial.println("Not connected to Master.");
        
        setupBlueToothConnection();   // Set up the local (slave) Bluetooth module

        delay(1000);                  // Wait one second and flush the serial buffers
        Serial.flush();
        blueToothSerial.flush();
    }
}


void loop()
{
    char recvChar;

    while(autoPilot == false)
    {
        if(blueToothSerial.available())   // Check if there's any data sent from the remote Bluetooth shield
        {
            recvChar = blueToothSerial.read();
            Serial.print(recvChar);
            if (recvChar == 'w') {  // this is forward
                servoLeft.writeMicroseconds(1700);
                servoRight.writeMicroseconds(1300);
            }
            
            else if (recvChar == 's') {                         
                servoLeft.writeMicroseconds(1300);
                servoRight.writeMicroseconds(1700);
            }
                   
            else if (recvChar == 'd') {
                servoLeft.writeMicroseconds(1550);
                servoRight.writeMicroseconds(1550);
            }
            
            else if (recvChar == 'a'){
                servoLeft.writeMicroseconds(1450);
                servoRight.writeMicroseconds(1450);
            }
            
            else if (recvChar == ' ') {
                servoLeft.writeMicroseconds(1500);
                servoRight.writeMicroseconds(1500);
            }
            
            else if (recvChar == 'j') {
                autoPilot = true;
            }
            
            
            // Where input is received from master as recvChar
            
        }
    }

        int leftReading;
        int rightReading;
        
        while (autoPilot)
        {
            recvChar = blueToothSerial.read();
            
            if (recvChar == 'k') {
                autoPilot = false;
            }

            int leftReading = irDetect(9, 10, 38000); 
            int rightReading = irDetect(2, 3, 38000); 

            Serial.print("L: ");
            Serial.println(leftReading);
            Serial.print("R: ");
            Serial.println(rightReading);
            
            if (leftReading == 0 && rightReading == 0) {//go forward
              servoLeft.write(1600);
              servoRight.write(1400);
            }

            else if (leftReading == 0 && rightReading == 1) {//turn right
              servoLeft.write(1600);
              servoRight.write(1500);
            }

            else if (leftReading == 1 && rightReading == 0) {//turn left
              servoLeft.write(1500);
              servoRight.write(1400);
            }
            else if(leftReading == 1 && rightReading == 1) {
              servoLeft.write(1500);
              servoRight.write(1500);
              blueToothSerial.print("Robot has found the object!");
            }
            else {
              
            }
            delay(10);
            


            
            /*
            int irLeft = irDetect(9, 10, 38000);       // Check for object on left
            int irRight = irDetect(2, 3, 38000);       // Check for object on right

            if((irLeft == 0) && (irRight == 0))        // If both sides detect
            {
              maneuver(-200, -200, 20);                // Backward 20 milliseconds
            }
            else if(irLeft == 0)                       // If only left side detects
            {
              maneuver(200, -200, 20);                 // Right for 20 ms
            }
            else if(irRight == 0)                      // If only right side detects
            {
              maneuver(-200, 200, 20);                 // Left for 20 ms
            }
            else                                       // Otherwise, no IR detects
            {
              maneuver(200, 200, 20);                  // Forward 20 ms
            }
            */
        }
// IR Object Detection Function


        
        if(Serial.available())            // Check if there's any data sent from the local serial terminal. You can add the other applications here.
        {
            recvChar  = Serial.read();
            
            // For input sent from slave monitor
            
            
          //Serial.print(recvChar);
            
            blueToothSerial.print(recvChar);
        }
    }

/*
int irDetect(int irLedPin, int irReceiverPin, long frequency)
{
  tone(irLedPin, frequency, 8);              // IRLED 38 kHz for at least 1 ms
  delay(1);                                  // Wait 1 ms
  int ir = digitalRead(irReceiverPin);       // IR receiver -> ir variable
  delay(1);                                  // Down time before recheck
  return ir;                                 // Return 1 no detect, 0 detect
}  

void maneuver(int speedLeft, int speedRight, int msTime)
{
  // speedLeft, speedRight ranges: Backward  Linear  Stop  Linear   Forward
  //                               -200      -100......0......100       200
  servoLeft.writeMicroseconds(1500 + speedLeft);   // Set left servo speed
  servoRight.writeMicroseconds(1500 - speedRight); // Set right servo speed
  if(msTime==-1)                                   // if msTime = -1
  {                                  
    servoLeft.detach();                            // Stop servo signals
    servoRight.detach();   
  }
  delay(msTime);                                   // Delay for msTime
}
*/

void setupBlueToothConnection()
{
    Serial.println("Setting up the local (slave) Bluetooth module.");

    slaveNameCmd += shieldPairNumber;
    slaveNameCmd += "\r\n";

    blueToothSerial.print("\r\n+STWMOD=0\r\n");      // Set the Bluetooth to work in slave mode
    blueToothSerial.print(slaveNameCmd);             // Set the Bluetooth name using slaveNameCmd
    blueToothSerial.print("\r\n+STAUTO=0\r\n");      // Auto-connection should be forbidden here
    blueToothSerial.print("\r\n+STOAUT=1\r\n");      // Permit paired device to connect me
    
    //  print() sets up a transmit/outgoing buffer for the string which is then transmitted via interrupts one character at a time.
    //  This allows the program to keep running, with the transmitting happening in the background.
    //  Serial.flush() does not empty this buffer, instead it pauses the program until all Serial.print()ing is done.
    //  This is useful if there is critical timing mixed in with Serial.print()s.
    //  To clear an "incoming" serial buffer, use while(Serial.available()){Serial.read();}

    blueToothSerial.flush();
    delay(2000);                                     // This delay is required

    blueToothSerial.print("\r\n+INQ=1\r\n");         // Make the slave Bluetooth inquirable
    
    blueToothSerial.flush();
    delay(2000);                                     // This delay is required
    
    Serial.println("The slave bluetooth is inquirable!");
}

int irDetect(int irLedPin, int irReceiverPin, long frequency)
{
  tone(irLedPin, frequency, 8);              // IRLED 38 kHz for at least 1 ms
  delay(1);                                  // Wait 1 ms
  int ir = digitalRead(irReceiverPin);       // IR receiver -> ir variable
  delay(1);                                  // Down time before recheck
  return ir;                                 // Return 1 no detect, 0 detect
}






